package agc_managementsystem.Forms;

import com.mycompany.agc_managementsystem.FilePath;
import com.mycompany.agc_managementsystem.User;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class Manager_Report extends javax.swing.JFrame {
    private User user = null;    
    private String month = "01";
    private int day = 0;
    
    /**
     * Creates new form PaymentManagement
     */
    public Manager_Report() {
        initComponents();
        
        int year = Calendar.getInstance().get(Calendar.YEAR);
        for(int i =20;i>0;i--)
        {
            cbYear.addItem(Integer.toString(year));
            year--;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
// <editor-fold defaultstate="collapsed" desc="Generated Code">

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupDuration = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnExport = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        cbDay = new javax.swing.JComboBox<>();
        cbYear = new javax.swing.JComboBox<>();
        cbMonth = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        RbtnWeekly = new javax.swing.JRadioButton();
        RbtnMonthly = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AGC Management System");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(60, 42, 77));

        jLabel6.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Report");

        jPanel2.setBackground(new java.awt.Color(131, 93, 166));
        jPanel2.setPreferredSize(new java.awt.Dimension(220, 50));

        btnExport.setBackground(new java.awt.Color(153, 255, 153));
        btnExport.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("HTML");

        cbDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        cbYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbYearActionPerformed(evt);
            }
        });

        cbMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER" }));
        cbMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMonthActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Year");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Month");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Day");

        RbtnWeekly.setBackground(new java.awt.Color(131, 93, 166));
        btnGroupDuration.add(RbtnWeekly);
        RbtnWeekly.setForeground(new java.awt.Color(255, 255, 255));
        RbtnWeekly.setSelected(true);
        RbtnWeekly.setText("Weekly");

        RbtnMonthly.setBackground(new java.awt.Color(131, 93, 166));
        btnGroupDuration.add(RbtnMonthly);
        RbtnMonthly.setForeground(new java.awt.Color(255, 255, 255));
        RbtnMonthly.setText("Monthly");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Duration");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(btnExport))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RbtnMonthly, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RbtnWeekly, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RbtnWeekly)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RbtnMonthly)
                .addGap(12, 12, 12)
                .addComponent(btnExport)
                .addGap(15, 15, 15))
        );

        btnBack.setBackground(new java.awt.Color(204, 204, 204));
        btnBack.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(96, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jLabel6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnBack)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel6)
                .addGap(27, 27, 27)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBack)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        BufferedReader br = null;
        try {
            String duration = btnGroupDuration.getSelection().toString();
            // Get data
            int totalSchedule = 0;
            int totalCompleted = 0;
            int totalPaid = 0;
            int totalIncome = 0;
            int totalLogin = 0;
            int totalFailed = 0;
            String Day = (cbDay.getSelectedItem().toString().length()==1) ? "0"+cbDay.getSelectedItem().toString() : cbDay.getSelectedItem().toString();
            String Date = cbYear.getSelectedItem().toString() + "-" + month + "-"+Day;
            String[] temp = Date.split("-");
            ArrayList<String> DataArr = new ArrayList<String>();
            int i = (btnGroupDuration.getSelection() == RbtnMonthly.getModel()?30:7);
            String[] getDate = new String[3];
            for(int j = 1;j<=i;j++){
                int foo = Integer.parseInt(temp[2]) - j;
                if(foo<=0){
                    if (Integer.parseInt(temp[1]) - 1 == 0) {
                        getDate[0] = Integer.toString(Integer.parseInt(temp[0]) - 1);
                        getDate[1] = "12";
                    } else{
                        getDate[0] = temp[0];
                        getDate[1] = (Integer.toString(Integer.parseInt(temp[1]) - 1).length()==1)? "0"+Integer.toString(Integer.parseInt(temp[1]) - 1):Integer.toString(Integer.parseInt(temp[1]) - 1);
                    }

                    int y = Integer.parseInt(getDate[0]);
                    switch (getDate[1]) {
                        case "01" -> {
                            foo = 31+foo;
                        }
                        case "02" -> {

                            // check if this year is the leap year
                            if (y % 400 == 0 || (y % 100 != 0 && y % 4 == 0)) {
                                foo = 29 + foo;
                            } else
                                foo = 28 + foo;
                        }
                        case "03" -> {
                            foo = 31 + foo;
                        }
                        case "04" -> {
                            foo = 30+foo;
                        }
                        case "05" -> {
                            foo = 31+foo;
                        }
                        case "06" -> {
                            foo = 30+foo;
                        }
                        case "07" -> {
                            foo = 31+foo;
                        }
                        case "08" -> {
                            foo = 31+foo;
                        }
                        case "09" -> {
                            foo = 30+foo;
                        }
                        case "10" -> {
                            foo = 31+foo;
                        }
                        case "11" -> {
                            foo = 30+foo;
                        }
                        case "12" -> {
                            foo = 31+foo;
                        }
                    }
                }else{
                    getDate[0] = temp[0];
                    getDate[1] = temp[1];
                    getDate[2] = (Integer.toString(foo).length()==1) ?"0"+Integer.toString(foo):Integer.toString(foo);
                }
                getDate[2] = (Integer.toString(foo).length()==1) ?"0"+Integer.toString(foo):Integer.toString(foo);
                DataArr.add(String.join("-", getDate));
                getDate = new String[3];
            }

            br = new BufferedReader(new FileReader(FilePath.getPath(FilePath.SCHEDULE)));
            String dataLine = null;
            String[] data = null;
            ArrayList<String> DataLineNeedToShow = new ArrayList<String>();
            boolean found = false;
            while((dataLine=br.readLine())!=null){
                data = dataLine.split(";");
                
                for(int j = 0;j<DataArr.size();j++){
                    System.out.println(DataArr.get(j));
                    if(data[3].equals(DataArr.get(j))) found = true;}
                if(found)
                {
                    DataLineNeedToShow.add(dataLine);
                    // Count
                    totalSchedule++;
                    if(Integer.parseInt(data[7])==1) totalCompleted++;
                    if(Integer.parseInt(data[8])==1) {
                        totalPaid++;
                        totalIncome += Integer.parseInt(data[6]);
                    }
                    found = false;
                }
            }
            
            br.close();
            br = new BufferedReader(new FileReader(FilePath.getPath(FilePath.LOGIN_RECORDS)));
            while((dataLine=br.readLine())!=null) {
                data = dataLine.split(";");
                temp = data[2].split(":");
                found = false;
                for(int j = 0;j<DataArr.size();j++){
                    if(temp[1].equals(DataArr.get(j))){
                        totalLogin++;
                        if(data[1].equals("Login Failed")) totalFailed++;
                    }
                }
                
            }
            br.close();
            
            // Pass these data to the create report method
            int[] SummaryData = {totalSchedule, totalCompleted, totalPaid, totalIncome, totalLogin, totalFailed};
            //DataLineNeedToShow;
            
            
            JFileChooser jfc = new JFileChooser();
            int returnVal = jfc.showSaveDialog(this);
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (returnVal == jfc.APPROVE_OPTION) {
                File fileToSave = jfc.getSelectedFile();
                try {
                    File file = new File(jfc.getSelectedFile().toString()+".html");
                    createHTMLFile(file, SummaryData, DataLineNeedToShow);

                    JOptionPane.showMessageDialog(null, "File Saved");

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "File Not Found!");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "File Input or Output Error!");
        }
        
    }//GEN-LAST:event_btnExportActionPerformed
    
    private void createHTMLFile(File file, int[] SummaryData, ArrayList<String> DataLines){
        BufferedWriter bw = null;
        String[] temp = null;
        try {
            // Create title string array
            // totalSchedule, totalCompleted, totalPaid, totalIncome, totalLogin, totalFailed
            String[] titleArr = {"Total Schedule", "Total Completed", "Total Paid", "Total Income(RM)", "Total Login", "Total Failed"};
            String[] titleArr_Sch = {"Schedule ID", "Customer ID", "Trainer ID", "Date", "Time", "Duration", "Price(RM)", "Completed", "Paid"};
            
            
            // Create a file
            bw = new BufferedWriter(new FileWriter(file));
            bw.write("<html>\n"
                    + "<style>\n"
                    + "table, th, td {\n"
                    + "  border:1px solid black;\n"
                    + "}\n"
                    + "html {"
                    + "  width:80%;"
                    + "  margin-left:auto;"
                    + "  margin-right:auto;"
                    + "}"
                    + "h2{"
                    + "  text-align:center;"
                    + "}"
                    + "</style>\n"
                    + "<body>");
            // Title
            bw.write("<br><br><h2>Report for AGC Management System</h2>\n");
            // Today date
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
            Date date = new Date();  
            bw.write("<h3>Date: "+formatter.format(date)+"</h3>\n");
            // Table
            bw.write("<hr><h4>Summary of the activities</h4>\n");
            bw.write("<table style=\"width:100%\">\n");
            
            // Create title row
            bw.write("<tr>\n");
            for (int i = 0; i < titleArr.length; i++) {
                bw.write("<th>");
                bw.write(titleArr[i]);
                bw.write("</th>");
            }   bw.write("</tr>\n");
            
            // Craete data row
            bw.write("<tr>\n");
            for (int i = 0; i < SummaryData.length; i++) {
                bw.write("<th>");
                bw.write(Integer.toString(SummaryData[i]));
                bw.write("</th>");
            }   bw.write("</tr>\n");
            bw.write("</table>\n");
            
            // Listing all schedule activities
            bw.write("<br><br><hr><h4>Schedule activities</h4>\n");
            bw.write("<h5>Duration</h5>\n");
            bw.write("<p>\"1\" - 30 mins</p>\n");
            bw.write("<p>\"2\" - 1 hour</p>\n");
            bw.write("<p>\"3\" - 1 hour 30 mins</p>\n");
            bw.write("<p>\"4\" - 2 hours</p>\n");            
            
            bw.write("<table style=\"width:100%\">\n");
            
            // Create title row
            bw.write("<tr>\n");
            for (int i = 0; i < titleArr_Sch.length; i++) {
                bw.write("<th>");
                bw.write(titleArr_Sch[i]);
                bw.write("</th>");
            }   bw.write("</tr>\n");
            
            // Craete data row
            for (int i = 0; i < DataLines.size(); i++) {
                bw.write("<tr>\n");
                temp = DataLines.get(i).split(";");
                for (int j = 0; j < temp.length; j++) {
                    bw.write("<th>");
                    bw.write(temp[j]);
                    bw.write("</th>");
                }
                bw.write("</tr>\n");
            }
            bw.write("</table>\n");
            bw.write("<br><br><hr>\n");
            bw.write("<i>End of report.</i>\n");
            
            bw.write("</body></html>");
            bw.close();
            Desktop.getDesktop().browse(file.toURI());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "File Input or Output Error!");
        }
    }
    
    
    private void cbMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMonthActionPerformed
        refreshMonth();
    }//GEN-LAST:event_cbMonthActionPerformed

    private void cbYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbYearActionPerformed
        refreshMonth();
    }//GEN-LAST:event_cbYearActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        Manager_Main m = new Manager_Main();
        m.setManager(this.user);
        m.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void refreshMonth(){
        cbDay.removeAllItems();
        int year = Integer.parseInt(cbYear.getSelectedItem().toString());
        switch(cbMonth.getSelectedItem().toString()){
            case "JANUARY" -> {
                day = 31;
                month = "01";
            }
            case "FEBRUARY" -> {
                
                // check if this year is the leap year
                day = 28;
                if(year%400==0||(year%100!=0&&year%4==0))
                    day = 29;
                month = "02";
            }
            case "MARCH" -> {
                day = 31;
                month = "03";
            }
            case "APRIL" -> {
                day = 30;
                month = "04";
            }
            case "MAY" -> {
                day = 31;
                month = "05";
            }
            case "JUNE" -> {
                day = 30;
                month = "06";
            }
            case "JULY" -> {
                day = 31;
                month = "07";
            }
            case "AUGUST" -> {
                day = 31;
                month = "08";
            }
            case "SEPTEMBER" -> {
                day = 30;
                month = "09";
            }
            case "OCTOBER" -> {
                day = 31;
                month = "10";
            }
            case "NOVEMBER" -> {
                day = 30;
                month = "11";
            }
            case "DECEMBER" -> {
                day = 31;
                month = "12";
            }
        }
        for(int i=1;i<=day;i++) cbDay.addItem(Integer.toString(i));
    }
    
    public void setManager(User u) {
        this.user = u;
    }   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Manager_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Manager_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Manager_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manager_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Manager_Report().setVisible(true);
            }
        });
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton RbtnMonthly;
    private javax.swing.JRadioButton RbtnWeekly;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnExport;
    private javax.swing.ButtonGroup btnGroupDuration;
    private javax.swing.JComboBox<String> cbDay;
    private javax.swing.JComboBox<String> cbMonth;
    private javax.swing.JComboBox<String> cbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
