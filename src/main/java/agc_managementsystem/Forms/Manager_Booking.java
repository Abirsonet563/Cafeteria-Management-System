package agc_managementsystem.Forms;

import com.mycompany.agc_managementsystem.FilePath;
import com.mycompany.agc_managementsystem.User;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;

public class Manager_Booking extends javax.swing.JFrame {
    private User user = null;
    
    // Member fields
    private String month = "01";
    private int day = 0;
    private String[] months = {"JANUARY", "FEBRUARY", "MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER" ,"DECEMBER"};
    private DateTimeFormatter dateY = DateTimeFormatter.ofPattern("yyyy");
    private DateTimeFormatter dateM = DateTimeFormatter.ofPattern("MM");
    private DateTimeFormatter dateD = DateTimeFormatter.ofPattern("dd");
    private LocalDateTime dateTimeNow = LocalDateTime.now();
    private int curYear = Integer.parseInt(dateTimeNow.format(dateY));
    private int curMonth = Integer.parseInt(dateTimeNow.format(dateM));
    private int curDay = Integer.parseInt(dateTimeNow.format(dateD));
    
    /**
     * Creates new form Training_Booking
     */
    public Manager_Booking() {
        initComponents();

        // Checking for current year and only accept the schedule of this year and next year       
        cbYear.addItem(Integer.toString(curYear));
        cbYear.addItem(Integer.toString(curYear+1));
        lblPrice.setText("RM 15");
        
        // Add trainer name into cbTrainer
        try{
            BufferedReader br = new BufferedReader(new FileReader(FilePath.getPath(FilePath.USER_DETAILS)));
            String dataLine=null;
            String[] data = null;
            while((dataLine = br.readLine()) != null && dataLine.length()!=0) {

                data = dataLine.split(";");
                if(data[6].equals("TRAINER")){
                    cbTrainer.addItem(data[0]);
                    cbTID.addItem(data[7]);
                }
            }
            br.close();
        }
        catch(IOException ex)
        {
            JOptionPane.showMessageDialog(null, "File input or output error");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtCID = new javax.swing.JTextField();
        cbTrainer = new javax.swing.JComboBox<>();
        cbTime = new javax.swing.JComboBox<>();
        cbDuration = new javax.swing.JComboBox<>();
        lblPrice = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        cbDay = new javax.swing.JComboBox<>();
        cbYear = new javax.swing.JComboBox<>();
        cbMonth = new javax.swing.JComboBox<>();
        cbTID = new javax.swing.JComboBox<>();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AGC Management System");
        setMaximumSize(new java.awt.Dimension(500, 400));
        setMinimumSize(new java.awt.Dimension(500, 400));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(60, 42, 77));
        jPanel1.setMaximumSize(new java.awt.Dimension(500, 400));
        jPanel1.setMinimumSize(new java.awt.Dimension(500, 400));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 400));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Customer ID :");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Trainer:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Date :");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Time :");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Duration :");

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Price :");

        cbTrainer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cbTrainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTrainerActionPerformed(evt);
            }
        });

        cbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00" }));

        cbDuration.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "30mins", "1hour", "1hour and 30mins", "2hours" }));
        cbDuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDurationActionPerformed(evt);
            }
        });

        lblPrice.setForeground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Schedule Booking  ");

        btnSubmit.setBackground(new java.awt.Color(153, 255, 153));
        btnSubmit.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        cbYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbYearActionPerformed(evt);
            }
        });

        cbMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER" }));
        cbMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMonthActionPerformed(evt);
            }
        });

        cbTID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cbTID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTIDActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(204, 204, 204));
        btnBack.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel9))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(jLabel7))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCID, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(cbDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbTime, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cbTrainer, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbTID, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(199, 199, 199)
                                .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(btnBack)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSubmit)
                            .addComponent(cbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTrainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cbTID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(btnBack)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSubmit)
                        .addGap(38, 38, 38))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void setManager(User u) {
        this.user = u;
    }
    
    private void cbMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMonthActionPerformed
        refreshMonth();
    }//GEN-LAST:event_cbMonthActionPerformed

    private void cbYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbYearActionPerformed
        refreshMonth();
    }//GEN-LAST:event_cbYearActionPerformed

    private void cbTrainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTrainerActionPerformed
        cbTID.setSelectedIndex(cbTrainer.getSelectedIndex());
    }//GEN-LAST:event_cbTrainerActionPerformed

    private void cbTIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTIDActionPerformed
        cbTrainer.setSelectedIndex(cbTID.getSelectedIndex());
    }//GEN-LAST:event_cbTIDActionPerformed

    private void cbDurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDurationActionPerformed
        String[] prices = {"15","30","45","60"};
        lblPrice.setText("RM "+prices[cbDuration.getSelectedIndex()]);
    }//GEN-LAST:event_cbDurationActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        try {
            // Check if UserID exist
            BufferedReader br = new BufferedReader(new FileReader(FilePath.getPath(FilePath.USER_DETAILS)));
            boolean isExisted = false;
            String dataLine = null;
            String[] data = null;
            String CID = txtCID.getText();
            
            while((dataLine = br.readLine()) != null) {
                data = dataLine.split(";");
                if(data[7].equals(CID)) {
                    isExisted = true;
                    break;
                }
            }
            br.close();
            
            // Check if TrainerID is selected
            boolean isSelected = cbTID.getSelectedIndex() != 0;
            
            // Check if the selected date is after today, !! today will not be accepted as well
            // Get Selected Date
            boolean isAcceptable= false;
            String Day;
            if (cbDay.getSelectedItem().toString().length() == 1) {
                Day = '0' + cbDay.getSelectedItem().toString();
            } else {
                Day = cbDay.getSelectedItem().toString();
            }
            String selectedDate = cbYear.getSelectedItem().toString() + '-' + month + '-' + Day;
            
            // compare the selectedDate and today
            SimpleDateFormat dateF = new SimpleDateFormat("yyyy-MM-dd");
            Date d = new Date();
            String todayDate = dateF.format(d);
            Date d1 = dateF.parse(selectedDate);
            Date d2 = dateF.parse(todayDate);
            if(d1.compareTo(d2) > 0) {
                isAcceptable = true;
            }
            
            
            if (isExisted && isSelected && isAcceptable) {
                //// Check if the selected Trainer have been booked in the same slot
                br = new BufferedReader(new FileReader(FilePath.getPath(FilePath.SCHEDULE)));
                ArrayList<String[]> DateTimeDuration = new ArrayList<String[]>();
                boolean isFree = false;

                //// check date first   
                // Get Date time duration which is related to the selected trainer
                dataLine = null;
                data = null;
                while ((dataLine = br.readLine()) != null) {
                    data = dataLine.split(";");
                    if (data[2].equals(cbTID.getSelectedItem().toString())) {
                        String[] temp = {data[3], data[4], data[5]};
                        DateTimeDuration.add(temp);
                    }
                }

                // Check if those schedule record have the same year month and day
                String[] tempDate = selectedDate.split("-");
                String[] foo = null;
                ArrayList<Integer> queueToRemove = new ArrayList<Integer>();
                boolean needToCheckTime = false;
                for (int i = 0; i < DateTimeDuration.size(); i++) {
                    foo = DateTimeDuration.get(i)[0].split("-");
                    if (tempDate[0].equals(foo[0]) && tempDate[1].equals(foo[1]) && tempDate[2].equals(foo[2])) {
                        needToCheckTime = true;
                    } else{
                        queueToRemove.add(i);
                    }
                }
                // remove element reversely
                for(int i = queueToRemove.size()-1;i>=0;i--){
                    DateTimeDuration.remove((int)queueToRemove.get(i));
                }
                
                if (!needToCheckTime) {
                    isFree = true;
                } else {
                    //// check time
                    boolean isRepeated = false;
                    
                    // Get every busy slot which should be checked check;
                    ArrayList<String> SchToCheck = new ArrayList<String>();
                    String[] Time = new String[2];
                    
                    for(int i = 0;i<DateTimeDuration.size();i++){
                        SchToCheck.add(DateTimeDuration.get(i)[1]);
                        Time = DateTimeDuration.get(i)[1].split(":");
                        String temp = null;
                        for(int j = 0;j<Integer.parseInt(DateTimeDuration.get(i)[2])-1;j++){  
                            if(Time[1].equals("30")){
                                temp = Integer.toString(Integer.parseInt(Time[0])+1);
                                if(temp.length()==1){
                                    temp = "0" + temp;
                                }
                                Time[1] = "00";
                                Time[0] = temp;
                            }else{Time[1] = "30";}
                            SchToCheck.add(String.join(":",Time));    
                        }
                    }
                    
                    // Check the selected time slot
                    // Get time and duration
                    ArrayList<String> targetTime = new ArrayList<String>();
                    String fromTime = cbTime.getSelectedItem().toString();
                    int duration = cbDuration.getSelectedIndex()+1;
                    String temp = null;
                    targetTime.add(fromTime);
                    Time = fromTime.split(":");
                    
                    for(int i = 1;i<=duration-1;i++) {
                        if (Time[1].equals("30")) {
                            temp = Integer.toString(Integer.parseInt(Time[0]) + 1);
                            if (temp.length() == 1) {
                                temp = "0" + temp;
                            }
                            Time[1] = "00";
                            Time[0] = temp;
                        } else {
                            Time[1] = "30";
                        }
                        targetTime.add(String.join(":", Time));    
                    }
                    isFree = true;
                    for(int i = 0;i<targetTime.size();i++) 
                        for(int j = 0;j<SchToCheck.size();j++)
                            if(targetTime.get(i).equals(SchToCheck.get(j))) {
                                isFree = false;
                                break;
                            }
                }
                
                if(isFree) {                    
                    // processing data and save into schedule.txt
                    // Generate new code
                    br = new BufferedReader(new FileReader(FilePath.getPath(FilePath.SCHEDULE)));
                    int rowCnt = 0;
                    while((dataLine = br.readLine())!=null) rowCnt++;
                    br.close();
                    String LatestSCode = "S" + (int)(++rowCnt);
                    
                    // get info
                    data = new String[]{LatestSCode, txtCID.getText(),cbTID.getSelectedItem().toString(),selectedDate, cbTime.getSelectedItem().toString(),Integer.toString(cbDuration.getSelectedIndex()+1), Integer.toString((cbDuration.getSelectedIndex()+1)*15),"0","0"};
                    BufferedWriter bw = new BufferedWriter(new FileWriter(FilePath.getPath(FilePath.SCHEDULE), true));
                    bw.write(String.join(";",data)+";"+"\n");
                    bw.close();
                    
                    // post successful message
                    JOptionPane.showMessageDialog(null, "The request is scheduled successfully!");
                    
                }else{
                    // clear field
                    txtCID.setText("");
                    
                    // show busy messages
                    JOptionPane.showMessageDialog(null, "The trainer is busy in the selected time slot");
                }

                br.close();
            }else{
                JOptionPane.showMessageDialog(null, "No trainer is selected or the customer id is not existing!\n Selected Date should be after today.");
            }
            
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "File not found!");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "File input or output error");
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Prsing error.");
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        Manager_Main m = new Manager_Main();
        m.setManager(this.user);
        m.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void refreshMonth(){        
        cbDay.removeAllItems();
        int selectedYear = Integer.parseInt(cbYear.getSelectedItem().toString());       
        switch(cbMonth.getSelectedItem().toString()){
            case "JANUARY" -> {
                day = 31;
                month = "01";
            }
            case "FEBRUARY" -> {
                
                // check if this year is the leap year
                day = 28;
                if(selectedYear%400==0||(selectedYear%100!=0&&selectedYear%4==0))
                    day = 29;
                month = "02";
            }
            case "MARCH" -> {
                day = 31;
                month = "03";
            }
            case "APRIL" -> {
                day = 30;
                month = "04";
            }
            case "MAY" -> {
                day = 31;
                month = "05";
            }
            case "JUNE" -> {
                day = 30;
                month = "06";
            }
            case "JULY" -> {
                day = 31;
                month = "07";
            }
            case "AUGUST" -> {
                day = 31;
                month = "08";
            }
            case "SEPTEMBER" -> {
                day = 30;
                month = "09";
            }
            case "OCTOBER" -> {
                day = 31;
                month = "10";
            }
            case "NOVEMBER" -> {
                day = 30;
                month = "11";
            }
            case "DECEMBER" -> {
                day = 31;
                month = "12";
            }
        }
        
        for(int i=1;i<=day;i++) cbDay.addItem(Integer.toString(i));
        
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Manager_Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Manager_Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Manager_Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manager_Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Manager_Booking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> cbDay;
    private javax.swing.JComboBox<String> cbDuration;
    private javax.swing.JComboBox<String> cbMonth;
    private javax.swing.JComboBox<String> cbTID;
    private javax.swing.JComboBox<String> cbTime;
    private javax.swing.JComboBox<String> cbTrainer;
    private javax.swing.JComboBox<String> cbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JTextField txtCID;
    // End of variables declaration//GEN-END:variables
}
