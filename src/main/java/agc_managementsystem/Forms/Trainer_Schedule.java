package agc_managementsystem.Forms;

import com.mycompany.agc_managementsystem.FilePath;
import com.mycompany.agc_managementsystem.User;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Trainer_Schedule extends javax.swing.JFrame {

    /**
     * Creates new form CheckSchedule_Trainer
     */
    // Member fields
    private User user = null;
    private String Trainer_ID = "";
    private ArrayList<String> price = new ArrayList<String>();
    private ArrayList<String> isPaid = new ArrayList<String>();
    private ArrayList<String> records = new ArrayList<String>();
    private String selectedUserid = "";
    
    public Trainer_Schedule() {
        initComponents(); 
    }

    private void showTable() {
        price.clear();
        isPaid.clear();
        try {
            BufferedReader br = new BufferedReader(new FileReader(FilePath.getPath(FilePath.SCHEDULE)));
            String[] dataRow = null;

            DefaultTableModel model = (DefaultTableModel) tableSchedule.getModel();
            String line;
            while ((line = br.readLine()) != null) {
                dataRow = line.split(";");

                //split row
                if (dataRow[2].equals(Trainer_ID)) {
                    String SID = dataRow[0];
                    String UN = dataRow[1];
                    String Date = dataRow[3];
                    String Time = dataRow[4];
                    String Duration = switchCategoryToStr(Integer.parseInt(dataRow[5]));   
                    price.add(dataRow[6]);
                    boolean Status = (Integer.parseInt(dataRow[7]) == 1) ? true : false;
                    isPaid.add(dataRow[8]);
                    
                    model.addRow(new Object[]{SID, UN, Date, Time, Duration, Status});

                }                    
            }
            br.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "File input or output error.");
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableSchedule = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnShowInfo = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(60, 42, 77));

        tableSchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Schedule ID", "Customer ID", "Date", "Time", "Duration", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSchedule.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableScheduleMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableSchedule);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("AGC");

        btnSave.setBackground(new java.awt.Color(153, 255, 153));
        btnSave.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(204, 204, 204));
        btnBack.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnShowInfo.setBackground(new java.awt.Color(255, 255, 255));
        btnShowInfo.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnShowInfo.setText("Show Info");
        btnShowInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(269, 269, 269))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnShowInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSave))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnBack)
                .addGap(77, 539, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave)
                            .addComponent(btnShowInfo))
                        .addContainerGap(60, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBack)
                        .addGap(16, 16, 16))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // Get details from table
        DefaultTableModel tb = (DefaultTableModel) tableSchedule.getModel();
        String inputString = "";
        for (int i = 0; i < tb.getRowCount(); i++) {
            for (int j = 0; j <= 5; j++) {
                if(j==1)inputString+=(tb.getValueAt(i, j).toString()+";"+this.Trainer_ID+";");
                else if(j==4)inputString+=(switchCategoryToInt(tb.getValueAt(i, j).toString())+";"+price.get(i)+";");
                else if(j!=5)inputString+=(tb.getValueAt(i, j).toString()+";");
                else inputString+=((tb.getValueAt(i, j).toString().equals("true")? 1 : 0)+";"+isPaid.get(i)+";");
            }
            inputString+="\n";
            records.add(inputString);        
            inputString="";
        }
        
        
        try{
            // Get details from file
            BufferedReader br = new BufferedReader(new FileReader(FilePath.getPath(FilePath.SCHEDULE)));
            ArrayList<String> fileRecords = new ArrayList<String>();
            String dataLine = null;
            while((dataLine = br.readLine())!=null) fileRecords.add(dataLine);
            br.close();

            // Compare and replace the one which Trainer equals to this trainer 
            boolean found;
            int targetIndex = -1;
            StringBuffer inputBuffer = new StringBuffer();
            for(int i = 0;i<fileRecords.size();i++){
                found = false;
                for(int j = 0;j<records.size();j++)
                {
                    if(fileRecords.get(i).split(";")[0].equals(records.get(j).split(";")[0])){
                        found = true;
                        targetIndex = j;
                        break;
                    }
                }
                if(found){
                    inputBuffer.append(records.get(targetIndex));
                }else{
                    inputBuffer.append(fileRecords.get(i)+"\n");
                }
            }
            
            // Save into the file
            FileOutputStream fos = new FileOutputStream(new File(FilePath.getPath(FilePath.SCHEDULE)));
            fos.write(inputBuffer.toString().getBytes());
            fos.close();
            JOptionPane.showMessageDialog(null, "Successfully Saved and Refreshed!");
        
        }catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Operation Failed: File not found.", "Updating Failed", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Operation Failed: File Input or Output Error.", "Updating Failed", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        Trainer_Main m = new Trainer_Main();
        m.setTrainer(this.user);
        m.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnShowInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowInfoActionPerformed
        try {
            BufferedReader br = new BufferedReader(new FileReader(FilePath.getPath(FilePath.USER_DETAILS)));
            String dataLine = null;
            String[] data = null;
            String name = null, contactno = null;
            while((dataLine = br.readLine())!=null && dataLine.length()!=0){
                data = dataLine.split(";");
                if(data[7].equals(this.selectedUserid)){
                    name = data[0];
                    contactno = data[3];
                    break;
                }
            }            
            br.close();
            JOptionPane.showMessageDialog(this, "Name: "+name+"\nContact No: "+contactno);
        }
        catch(IOException e) {
            JOptionPane.showMessageDialog(null, "File input or output error!");
        }
        catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Please Select a row to update!");
        }
    }//GEN-LAST:event_btnShowInfoActionPerformed

    private void tableScheduleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableScheduleMouseClicked
        DefaultTableModel tb = (DefaultTableModel) tableSchedule.getModel();
        
        // set data to the selected row's data
        selectedUserid = tb.getValueAt(tableSchedule.getSelectedRow(), 1).toString();
    }//GEN-LAST:event_tableScheduleMouseClicked

    public void setTrainer(User u) {
        this.user = u;
        Trainer_ID = u.getID();
        showTable();
    }
    
    private int switchCategoryToInt(String str) {
        switch (str) {
            case "30mins":
                return 1;
            case "1hour":
                return 2;
            case "1hour and 30 minutes":
                return 3;
            case "2hours":
                return 4;

        }
        return -1;
    }

    private String switchCategoryToStr(int i) {

        switch (i) {
            case 1:
                return "30mins";
            case 2:
                return "1hour";
            case 3:
                return "1hour and 30 minutes";
            case 4:
                return "2hours";
        }
        return null;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Trainer_Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Trainer_Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Trainer_Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Trainer_Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Trainer_Schedule().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnShowInfo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tableSchedule;
    // End of variables declaration//GEN-END:variables
}
